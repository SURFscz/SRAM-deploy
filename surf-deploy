#!/bin/bash
set -e

ENV=test
LOGDIR=logs

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
RESET=$(tput sgr0)
FAIL="${RED}FAIL${RESET}"
OK="${GREEN}OK${RESET}"

# https://github.com/jmespath/jmespath.py/pull/188
export PYTHONWARNINGS=ignore

mkdir -p $LOGDIR || true

WARNING=0
STRICT=1

ARG=${1#--}
if [ "$ARG" = "bhr" -o "$ARG" = "beheer" ]
then
    ENV=bhr
    CONFDIR=./environments/aws_bhr/
    EXTRA="${EXTRA} --ask-vault-pass"
    STRICT=0
    shift
elif [ "$ARG" = "prd" -o "$ARG" = "prod" ]
then
    ENV=prd
    CONFDIR=./environments/aws_prd/
    EXTRA="${EXTRA} --ask-vault-pass"
    shift
elif [ "$ARG" = "acc" ]
then
    ENV=acc
    CONFDIR=./environments/aws_acc/
    EXTRA="${EXTRA} --ask-vault-pass"
    shift
elif [ "$ARG" = "tst" -o "$ARG" = "test" ]
then
    ENV=tst
    CONFDIR=./environments/aws_tst/
    EXTRA="${EXTRA}"
    STRICT=0
    shift
else
    echo "Please specify an environment to deploy (bhr, prod, acc, test)"
    exit 1
fi

LOG=$LOGDIR/deploy-${ENV}.$(date '+%Y%m%d_%H%M').log
date >> $LOG
echo "$0 $@" >> $LOG

# TODO: all output in log files

# first check that deploy and config repos are clean and are using the same version
# deploy
echo -n "Checking if SCZ-deploy is clean... "
if ! git diff-index --quiet HEAD --
then
    echo -e "$FAIL"
    git status | sed 's/^/  > /'
    echo
    WARNING=1
else
    echo -e "$OK"
fi
branch_deploy=$(git symbolic-ref HEAD 2> /dev/null || git describe --exact)

# config
cwd=$(pwd)
cd "$CONFDIR"
echo -en "Checking if Environment repo is clean... "
if ! git diff-index --quiet HEAD --
then
    echo -e "$FAIL"
    git status | sed "s/^/  > /"
    echo
    WARNING=1
else
    echo -e "$OK"
fi
branch_config=$(git symbolic-ref HEAD 2> /dev/null || git describe --exact)
cd "$cwd"

echo -n "Checking whether deploy and config are in sync... "
if [ "$branch_deploy" != "$branch_config" ]
then
    echo -e "$FAIL"
    echo "  > Deploy branch: ${RED}'$branch_deploy'${RESET}"
    echo "  > Config branch: ${RED}'$branch_config'${RESET}"
    echo
    WARNING=1
else
    echo -e "$OK ($branch_deploy)"
fi

if [ "$WARNING" != "0" ]
then
    if [ "$STRICT" != "0" ]
    then
        echo "Warnings encountered, refusing to deploy in strict mode"
        exit 1
    fi
    echo
    read -p "Warning encountered, are you sure you want to continue (yes/no)? " result
    if [ "$result" != "yes" ]
    then
        echo "Exiting..."
        exit 1
    fi
fi


# try to find mitogen
MITOGEN_PATH=
MITOGEN_SUBPATH=ansible_mitogen/plugins/strategy
for p in ./mitogen /opt/mitogen /usr/local/mitogen /usr/mitogen ~/.mitogen ~/mitogen
do
    if [ -d "$p/$MITOGEN_SUBPATH/" ]
    then
        MITOGEN_PATH=$p
        break
    fi
done
if [ -n "$MITOGEN_PATH" -a ! ansible --version|head -1|grep -q 2.11 ]
then
    echo "Found Mitogen at $MITOGEN_PATH"
    export ANSIBLE_STRATEGY_PLUGINS=$MITOGEN_PATH/$MITOGEN_SUBPATH/
    export ANSIBLE_STRATEGY=mitogen_linear
else
    echo "Mitogen not found; falling back to default ansible ssh"
fi

CMD="ansible-playbook provision.yml \
    -i "$CONFDIR/inventory" \
    --limit=${ENV} \
    --ask-become \
    --diff \
    ${EXTRA} \
    "$@"
"

CMD=$( echo $CMD | sed 's/\s\+/ /g' )

echo "Deploying to SURfscz $ENV..."
echo "Log file: $LOG"
echo "Will execute: $CMD"

stdbuf --output=0 --error=0 $CMD 2>&1 | tee -a "$LOG"

exit 0
