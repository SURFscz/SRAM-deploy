#!/usr/bin/env python3
from __future__ import print_function
import yaml
import sys
import jinja2
import argparse


# custom class to support loading !vault entries from yml files
# noinspection PyPep8Naming
class vault(yaml.YAMLObject):
    yaml_tag = '!vault'

    def __init__(self, val):
        self.val = val

    @classmethod
    def from_yaml(cls, loader, node):
        return cls(node.value)


parser = argparse.ArgumentParser()
parser.add_argument("-q", "--quiet", help="Be quiet; only output errors", action="store_true")
parser.add_argument("filename", nargs='*')
args = parser.parse_args()

jinja2_env = jinja2.Environment()

for filename in args.filename:
    err: int = 0
    str = "Checking {}... ".format(filename)

    try:
        with open(filename, encoding='utf-8') as f:
            if filename.endswith('.j2'):
                jinja2_env.parse(f.read())
            elif filename.endswith('.yml') or filename.endswith('.yaml'):
                yaml.load(f.read(), yaml.Loader)
            else:
                raise Exception(f"Unknown extension for file {filename}")
    except Exception as e:
        str += "failed: {}".format(e)
        err += 1
    else:
        str += "ok"

    if err:
        print(str)
        sys.exit(err)

    if not args.quiet:
        print(str)

sys.exit(0)
