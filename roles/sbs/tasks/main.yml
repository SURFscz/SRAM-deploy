---
## TODO: draai SBS als non-www-data user


- name: "Install node repository key"
  apt_key:
    id: "9FD3B784BC1C6FC31A8A0A1C1655A0AB68576280"
    url: "https://deb.nodesource.com/gpgkey/nodesource.gpg.key"

- name: "Install node repository"
  apt_repository:
    repo: "deb https://deb.nodesource.com/node_12.x buster main"
    state: "present"

- name: Install required packages
  apt:
    state: "latest"
    name:
      - nodejs
      - python3-pymysql
      - libapache2-mod-wsgi-py3
      - mariadb-client
      - libxmlsec1-dev  # for python xmlsec pkg
      - pkg-config      # for python xmlsec pkg
    install_recommends: false

- name: Remove obsolete packages
  apt:
    state: absent
    name:
      - libapache2-mod-auth-openidc
  notify: "restart apache"

- name: Enable correct apache modules
  apache2_module:
    state: "{{ item.value }}"
    name: "{{ item.key }}"
    ignore_configcheck: True
  with_dict:
    wsgi: present
  notify: "restart apache"

- name: Configure Apache vhost
  template:
    src: sbs.conf.j2
    dest: /etc/apache2/sites-enabled/sbs.conf
  notify: "restart apache"

- name: Comment MinProtocol in openssl.conf on dockers
  replace:
    path: /etc/ssl/openssl.cnf
    regexp: '(^MinProtocol.*)'
    replace: '#\1'
  when: "is_docker"

- name: Install database certificate
  copy:
    dest: "{{sbs_db_cert_path}}"
    content: "{{ sbs_db_tls_cert }}"

- name: Initialialize database
  throttle: 1
  block:
    - name: Add SBS database
      community.mysql.mysql_db:
        login_host: '{{ db_host }}'
        login_user: '{{ db_admin_user }}'
        login_password: '{{ db_admin_password }}'
        name: '{{ sbs_db_name }}'
        encoding: 'utf8mb4'
        collation: 'utf8mb4_unicode_ci'
        ca_cert: "{{sbs_db_cert_path}}"
      notify: "restart apache"

    - name: Add SBS user
      community.mysql.mysql_user:
        login_host: '{{ db_host }}'
        login_user: '{{ db_admin_user }}'
        login_password: '{{ db_admin_password }}'
        name: '{{ item.user }}'
        host: '{{ ansible_default_ipv4.address }}'
        password: '{{ item.passwd }}'
        priv: '{{ sbs_db_name }}.*:{{ item.priv }}'
        ca_cert: "{{sbs_db_cert_path}}"
      with_items:
        - user: "{{ sbs_db_user }}"
          passwd: "{{ sbs_db_password }}"
          priv: "SELECT,INSERT,DELETE,UPDATE"
        - user: "{{ sbs_migration_user }}"
          passwd: "{{ sbs_migration_password }}"
          priv: "ALL"
        - user: "{{ sbs_dbbackup_user }}"
          passwd: "{{ sbs_dbbackup_password }}"
          priv: "SELECT"
      no_log: "{{sram_ansible_nolog}}"
      notify: "restart apache"

- name: "Create directories"
  file:
    path: "{{item.path}}"
    state: "directory"
    owner: "{{item.owner}}"
    group: "{{item.owner}}"
    mode: "0755"
  with_items:
    - { path: "{{sbs_work_dir}}",            owner: "{{sbs_file_owner}}" }
    - { path: "{{sbs_conf_dir}}",            owner: "{{sbs_file_owner}}" }
    - { path: "{{sbs_conf_dir}}/saml",       owner: "{{sbs_file_owner}}" }
    - { path: "{{sbs_log_dir}}",             owner: "www-data"           }

- name: Download SBS build
  get_url:
    url: "{{sbs_build_url}}"
    dest: "{{sbs_work_dir}}/sbs.tar.xz"
    force: true
  register: "sbs_download"

- name: Remove previous SBS backup
  file:
    path: "{{ sbs_git_dir }}.old"
    state: "absent"
  when: "sbs_download.changed"

- name: Save old SBS dir
  shell: |
    if test -e '{{ sbs_git_dir }}'
    then
      mv '{{ sbs_git_dir }}' '{{ sbs_git_dir }}.old'
    fi
  when: "sbs_download.changed"

- name: Deploy SBS build
  unarchive:
    src: "{{sbs_work_dir}}/sbs.tar.xz"
    dest: "{{ sbs_work_dir }}"
    remote_src: true
    owner: "{{sbs_file_owner}}"
    group: "{{sbs_file_owner}}"
  notify: "restart apache"
  when: "sbs_download.changed"

- name: Create SBS wsgi file
  template:
    src: sbs-api.wsgi.j2
    dest: "{{ sbs_work_dir }}/sbs-api.wsgi"
    mode: "0644"
  notify: "restart apache"

- name: Create SBS config files
  template:
    src: "{{item.name}}.j2"
    dest: "{{ sbs_conf_dir }}/{{item.name}}"
    group: "www-data"
    mode: "{{item.mode}}"
  with_items:
    - { name: "config.yml",     mode: "0640" }
    - { name: "alembic.ini",    mode: "0644" }
    - { name: "disclaimer.css", mode: "0644" }
  notify: "restart apache"
  no_log: "{{sram_ansible_nolog}}"

- name: write server JWT keys
  copy:
    content: "{{ item.content }}"
    dest: "{{ sbs_conf_dir }}/{{ item.path }}"
    group: "www-data"
    mode: "0640"
  with_items:
    - { path: "jwt_private_key",      content: "{{ sbs_jwt_server.priv }}" }
    - { path: "jwt_public_keys.json", content: "{{ sbs_jwt_server.pub }}"  }
  notify: "restart apache"
  no_log: "{{ sram_ansible_nolog }}"

- name: Create SBS SURFSecure ID config files
  template:
    src: "saml_{{ item.name }}.j2"
    dest: "{{ sbs_conf_dir }}/saml/{{item.name}}"
    group: "www-data"
    mode: "{{ item.mode }}"
  with_items:
    - { name: "settings.json",          mode: "0640" }
    - { name: "advanced_settings.json", mode: "0644" }
  notify: "restart apache"
  no_log: "{{ sram_ansible_nolog }}"

- name: Create links to config files
  file:
    state: "link"
    path: "{{ sbs_git_dir }}/{{ item.path }}"
    src: "{{ sbs_conf_dir }}/{{ item.links_to }}"
    force: yes
  with_items:
    - { path: "server/config/config.yml",           links_to: "config.yml"           }
    - { path: "server/migrations/alembic.ini",      links_to: "alembic.ini"           }
    - { path: "server/config/saml",                 links_to: "saml"                 }
    - { path: "client/build/static/disclaimer.css", links_to: "disclaimer.css"       }
    - { path: "server/config/jwt_private_key",      links_to: "jwt_private_key"      }
    - { path: "server/config/jwt_public_keys.json", links_to: "jwt_public_keys.json" }
  notify: "restart apache"

- name: Link log dir
  file:
    state: "link"
    path: "{{ sbs_git_dir }}/log"
    src: "{{ sbs_log_dir }}"
  notify: "restart apache"

- name: Create python3 virtualenv
  import_role:
    name: "python-venv"
  vars:
    python_venv_dir: "{{ sbs_env_dir }}"
    python_venv_requirements: "{{ sbs_git_dir }}/server/requirements/test.txt"
  notify: "restart apache"

- name: install database dump script
  template:
    src: "backup-database.sh.j2"
    dest: "{{backup_runparts}}/backup-database.sh"
    mode: "0700"
  no_log: "{{sram_ansible_nolog}}"

- name: Run SBS migrations
  command:
    cmd: "{{ sbs_env_dir }}/bin/alembic --config migrations/alembic.ini upgrade head"
    chdir: "{{ sbs_work_dir }}/sbs/server"
  register: result
  failed_when: result.rc != 0
  changed_when: result.rc != 0
  notify: "restart apache"
