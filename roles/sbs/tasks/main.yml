---
- name: Install required packages
  apt:
    state: present
    name:
      - yarnpkg
      - nodejs
      - build-essential
      - python3
      - python3-dev
      - python3-virtualenv
      - python3-setuptools
      - python-setuptools
      - python3-pymysql
      - virtualenv
      - python3-distutils
      - libapache2-mod-wsgi-py3
      - mariadb-client

- name: Remove obsolete packages
  apt:
    state: absent
    name:
      - libapache2-mod-auth-openidc
  notify: "restart apache"

- name: Enable correct apache modules
  apache2_module:
    state: "{{ item.value }}"
    name: "{{ item.key }}"
    ignore_configcheck: True
  with_dict:
    wsgi: present
  notify: "restart apache"

- name: Configure Apache vhost
  template:
    src: sbs.conf.j2
    dest: /etc/apache2/sites-enabled/sbs.conf
  notify: "restart apache"

- name: Comment MinProtocol in openssl.conf on dockers
  replace:
    path: /etc/ssl/openssl.cnf
    regexp: '(^MinProtocol.*)'
    replace: '#\1'
  when: environment_name=="vm"

- name: Install database certificate
  copy:
    dest: "{{sbs_db_cert_path}}"
    content: "{{ sbs_db_tls_cert }}"

- name: Initialialize database
  throttle: 1
  block:
    - name: Add SBS database
      community.mysql.mysql_db:
        login_host: '{{ db_host }}'
        login_user: '{{ db_admin_user }}'
        login_password: '{{ db_admin_password }}'
        name: '{{ sbs_db_name }}'
        encoding: 'utf8'
        ca_cert: "{{sbs_db_cert_path}}"

    - name: Add SBS user
      community.mysql.mysql_user:
        login_host: '{{ db_host }}'
        login_user: '{{ db_admin_user }}'
        login_password: '{{ db_admin_password }}'
        name: '{{ item.user }}'
        host: '{{ ansible_default_ipv4.address }}'
        password: '{{ item.passwd }}'
        priv: '{{ sbs_db_name }}.*:{{ item.perm }}'
        ca_cert: "{{sbs_db_cert_path}}"
      with_items:
        - user: "{{ sbs_db_user }}"
          passwd: "{{ sbs_db_password }}"
          perm: "ALL"
        - user: "{{ sbs_dbbackup_user }}"
          passwd: "{{ sbs_dbbackup_password }}"
          perm: "SELECT,SHOW VIEW,EVENT,TRIGGER"
      no_log: "{{sram_ansible_nolog}}"

- name: Clone SBS repository
  git:
    repo: "{{ sbs_repository }}"
    dest: "{{ sbs_git_dir }}"
    version: "{{ sbs_version }}"
  notify: "restart apache"
  register: git_apps

- name: Add git info to server
  shell: git --git-dir {{ sbs_git_dir }}/.git  log -1 > {{ sbs_git_dir }}/server/api/git.info
  changed_when: false

- name: Create python3 virtualenv
  pip:
    virtualenv: "{{ sbs_env_dir }}"
    virtualenv_python: python3
    requirements: "{{ sbs_git_dir }}/server/requirements/test.txt"
  notify: "restart apache"

- name: check for yarn dependencies
  stat:
    path: "{{ sbs_git_dir }}/client/node_modules"
  register: yarn_deps

# This doesn't work atm
#- name: Install yarn dependancies
  #yarn:
    #executable: "/usr/bin/yarnpkg"
    #path: "{{ sbs_git_dir }}/client"
  #register: yarn_install
  #when: git_apps.changed or not yarn_deps.stat.exists

- name: Install yarn dependancies
  command:
    cmd: "/usr/bin/yarnpkg install --non-interactive"
    chdir: "{{ sbs_git_dir }}/client"
  register: yarn_install
  when: git_apps.changed or not yarn_deps.stat.exists

- name: Build client yarn
  command:
    cmd: "/usr/bin/yarnpkg build"
    chdir: "{{ sbs_git_dir }}/client"
  when: git_apps.changed or yarn_install.changed

# yarn install modifies yarn.lock (ARGRGRGR), which dirties the repository and
# causes git pulls to fail, so clean up yarn's mess manually
- name: Clear up yarn crap
  command:
    cmd: "git checkout client/yarn.lock"
    chdir: "{{ sbs_git_dir }}"
  when: yarn_install.changed
  changed_when: true

# TODO: draai SBS als non-www-data user
- name: Create SBS config file
  template:
    src: config.yml.j2
    dest: "{{ sbs_git_dir }}/server/config/config.yml"
    group: "www-data"
    mode: "0640"
  notify: "restart apache"
  no_log: "{{sram_ansible_nolog}}"

- name: write server JWT private signing key
  copy:
    content: "{{ sbs_jwt_server.priv }}"
    dest: "{{ sbs_git_dir }}/server/config/jwt_private_key"
    group: "www-data"
    mode: "0640"
  notify: "restart apache"
  no_log: "{{sram_ansible_nolog}}"

- name: write server JWT public signing key
  copy:
    content: "{{ sbs_jwt_server.pub }}"
    dest: "{{ sbs_git_dir }}/server/config/jwt_public_keys.json"
    group: "www-data"
    mode: "0640"
  notify: "restart apache"
  no_log: "{{sram_ansible_nolog}}"

- name: Create SBS wsgi file
  template:
    src: sbs-api.wsgi.j2
    dest: "{{ sbs_git_dir }}/sbs-api.wsgi"
  notify: "restart apache"

- name: Create SBS environment disclaimer file
  template:
    src: disclaimer.css.j2
    dest: "{{ sbs_git_dir }}/server/static/disclaimer.css"

- name: Copy static files to apache document root
  copy:
    src: "{{ sbs_git_dir }}/server/static/"
    dest: "{{ sbs_git_dir }}/client/build/static"
    remote_src: yes

- name: touch sbs.log file
  file:
    path: /opt/sbs/sbs/log
    state: directory
    owner: www-data
    group: www-data
    mode: 0755

- name: install database dump script
  template:
    src: "backup-database.sh.j2"
    dest: "{{backup_runparts}}/backup-database.sh"
    mode: "0700"
  no_log: "{{sram_ansible_nolog}}"
