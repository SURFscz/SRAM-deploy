database:
    uri: {{ sbs_db_connection_sbs }}

redis:
{% if environment_name == 'tst2' %}
  uri: "redis://{{sbs_redis_host}}/"
{% else %}
  uri: "redis{% if sbs_redis_ssl %}s{% endif %}://{{ sbs_redis_user }}:{{ sbs_redis_password }}@{{ sbs_redis_host }}:{{ sbs_redis_port }}/"
{% endif %}

# add a per-release suffix here to invalidate sessions on new releases
secret_key: {{ sbs_db_secret }}{{sbs_secret_key_suffix}}
# Must be a base64 encoded key of 128, 192, or 256 bits.
# Generate: base64.b64encode(os.urandom(256 // 8)).decode()
encryption_key: {{ sbs_encryption_key  }}

# Lifetime of session in minutes (one day is 60 * 24)
permanent_session_lifetime: {{ sbs_session_lifetime }}

# Valid scopes are "READ" and "WRITE"
api_users:
{% for name, user in sbs_api_users.items() %}
  - name: "{{ name }}"
    password: "{{ user.password }}"
    scopes: "[ {{ user.scopes | join(', ') }} ]"
{% endfor %}

oidc:
  client_id: "{{ sbs_client_id }}"
  client_secret: "{{ sbs_client_secret }}"
  audience: "{{ sbs_oidc_jwt_audience }}"
  authorization_endpoint: "{{ sbs_oidc_authz_endpoint}}"
  token_endpoint: "{{ sbs_oidc_token_endpoint }}"
  userinfo_endpoint: "{{ sbs_oidc_userinfo_endpoint }}"
  jwks_endpoint: "{{ sbs_oidc_jwks_endpoint }}"
  #Note that the paths for these  uri's is hardcoded and only domain and port differ per environment
  redirect_uri: "{{ sbs_oidc_redirect_uri }}"
  continue_eduteams_redirect_uri: "{{ sbs_eduteams_continue_endpoint }}"
  second_factor_authentication_required: {{ sbs_second_factor_authentication_required }}
  totp_token_name: "{{ sbs_totp_token_name }}"
  # The service_id in the proxy_authz endpoint when logging into SBS. Most likely to equal the oidc.client_id
  sram_service_entity_id: "{{ sbs_client_id }}"
  scopes:
    - profile
    - eduperson_scoped_affiliation
    - voperson_external_affiliation
    - email
    - ssh_public_key
    - eduperson_orcid
    - uid
    - voperson_external_id
    - eduperson_entitlement
    - eduperon_assurance
    - openid
    - eduperson_principal_name
    - voperson_id

base_scope: "{{ base_domain }}"
entitlement_group_namespace: "{{ sbs_urn_namespace }}"
eppn_scope: " {{ sbs_eppn_scope }}"
collaboration_creation_allowed_entitlement: "urn:mace:surf.nl:sram:allow-create-co"

{% if environment_name == "prd" %}
environment_disclaimer: ""
{% else %}
environment_disclaimer: "{{ sbs_disclaimer_label }}"
{% endif %}

# All services in the white list can be requested in the create-restricted-co API
# The default organisation is a fallback for when the administrator has no schac_home_org
restricted_co:
  services_white_list: ["https://cloud"]
  default_organisation: "{{ sbs_restricted_co_default_org }}"

mail:
  host: {{ sbs_mail_host }}
  port: {{ sbs_mail_port }}
  sender_name: {{ sbs_mail_sender_name }}
  sender_email: {{ sbs_mail_sender_email }}
  suppress_sending_mails: False
  info_email: {{ sbs_support_email }}
  beheer_email: {{ sbs_admin_email }}
  ticket_email: {{ sbs_ticket_email }}
  eduteams_email: {{ sbs_eduteams_email }}
  # Do we mail a summary of new Organizations and Services to the beheer_email?
  audit_trail_notifications_enabled: {{ sbs_audit_trail_notifications_enabled }}
  account_deletion_notifications_enabled: True
  send_exceptions: {{ sbs_send_exceptions }}
  send_js_exceptions: {{ sbs_send_js_exceptions }}
  send_exceptions_recipients: ["{{ sbs_exceptions_mail }}"]
  environment: "{{ base_domain }}"

manage:
  enabled: {{ sbs_manage_base_enabled }}
  base_url: "{{ sbs_manage_base_url }}"
  user: "{{ sbs_manage_user }}"
  password: "{{ sbs_manage_password }}"

aup:
  version: 1
  url_aup_en: "https://edu.nl/6wb63"
  url_aup_nl: "https://edu.nl/6wb63"

base_url: {{ sbs_base_url }}
socket_url: {{ sbs_base_url }}
base_server_url: {{ sbs_base_url }}
wiki_link: {{ sbs_wiki_link }}

admin_users:
{% for admin_user in sbs_admin_users %}
  - uid: "{{ admin_user.uid }}"
{% endfor %}

organisation_categories:
  - "University"
  - "HBO"
  - "UMC"
  - "Research"
  - "SURF"

feature:
  seed_allowed: {{ sbs_seed_allowed }}
  api_keys_enabled: {{ sbs_api_keys_enabled }}
  feedback_enabled: {{ sbs_feedback_enabled }}
  impersonation_allowed: {{ sbs_impersonation_allowed }}
  sbs_swagger_enabled: {{ sbs_swagger_enabled }}
  admin_platform_backdoor_totp: {{ sbs_admin_platform_backdoor_totp }}
  past_dates_allowed: {{ sbs_past_dates_allowed }}
  mock_scim_enabled: {{ sbs_mock_scim_enabled }}

metadata:
  idp_url: "{{sbs_idp_metadata_url}}"
  parse_at_startup: True
  # No need for environment specific values
  scope_override:
    knaw.nl: "Koninklijke Nederlandse Akademie van Wetenschappen (KNAW)"

platform_admin_notifications:
  # Do we daily check for CO join_requests and CO requests and send a summary mail to beheer_email?
  enabled: False
  cron_hour_of_day:  {{ sbs_cron_hour_of_day }}
  # How long before we include open join_requests in the summary
  outstanding_join_request_days_threshold: 7
  # How long before we include open CO requests in the summary
  outstanding_coll_request_days_threshold: 7

user_requests_retention:
  # Do we daily check for CO join_requests and CO requests and delete approved and denied?
  enabled: {{ sbs_notifications_enabled }}
  cron_hour_of_day: {{ sbs_cron_hour_of_day }}
  # How long before we delete approved / denied join_requests
  outstanding_join_request_days_threshold: 90
  # How long before we delete approved / denied CO requests
  outstanding_coll_request_days_threshold: 90

# The retention config determines how long users may be inactive, how long the reminder email is valid and when do we resent the magic link
retention:
  cron_hour_of_day: {{ sbs_cron_hour_of_day }}
  # how many days of inactivity before a user is suspended
  #   0 allows for any last_login_date in the past to trigger suspension notification
  allowed_inactive_period_days: {{ sbs_suspension_inactive_days }}
  # how many days before suspension do we send a warning
  #   -1 will suspend notified users on second suspension cron
  reminder_suspend_period_days: {{ sbs_suspension_reminder_days }}
  # how many days after suspension do we delete the account
  remove_suspended_users_period_days: 90
  # how many days before deletion do we send a reminder
  reminder_expiry_period_days: 7
  # whether to send a notification of the result of the retention process to the beheer_email
  admin_notification_mail: {{ sbs_suspension_notify_admin }}

collaboration_expiration:
  # Do we daily check for CO's that will be deleted because they have been expired?
  enabled: {{ sbs_notifications_enabled }}
  cron_hour_of_day: {{ sbs_cron_hour_of_day }}
  # How long after expiration do we actually delete expired collaborations
  expired_collaborations_days_threshold: 90
  # How many days before actual expiration do we mail the organisation members
  expired_warning_mail_days_threshold: 10

collaboration_suspension:
  # Do we daily check for CO's that will be suspended because of inactivity?
  enabled: {{ sbs_notifications_enabled }}
  cron_hour_of_day: {{ sbs_cron_hour_of_day }}
  # After how many days of inactivity do we suspend collaborations
  collaboration_inactivity_days_threshold: 365
  # How many days before actual suspension do we mail the organisation members
  inactivity_warning_mail_days_threshold: 10
  # After how many days after suspension do we actually delete the collaboration
  collaboration_deletion_days_threshold: 90

membership_expiration:
  # Do we daily check for memberships that will be deleted because they have been expired?
  enabled: {{ sbs_notifications_enabled }}
  cron_hour_of_day: {{ sbs_cron_hour_of_day }}
  # How long after expiration do we actually delete expired memberships
  expired_memberships_days_threshold: 90
  # How many days before actual expiration do we mail the co admin and member
  expired_warning_mail_days_threshold: 10

invitation_reminders:
  # Do we daily check for invitations that need a reminder?
  enabled: {{ sbs_invitation_reminders_enabled }}
  cron_hour_of_day: {{ sbs_cron_hour_of_day }}
  # How many days before expiration of an invitation do we remind the user?
  invitation_reminders_threshold: 5

invitation_expirations:
  # Do we daily check for invitations that are expired / accepted and are eligible for deletion ?
  enabled: {{ sbs_invitation_expirations_enabled }}
  cron_hour_of_day: {{ sbs_cron_hour_of_day }}
  # How long after expiration of an invitation do we delete the invitation?
  nbr_days_remove_expired_invitations: 10
  # How long after expiration of an API created invitation do we delete the invitation?
  nbr_days_remove_api_expired_invitations: 30

orphan_users:
  # Do we daily check for users that are orphans soo they can be deleted?
  enabled:  {{ sbs_delete_orphaned }}
  cron_hour_of_day: {{ sbs_cron_hour_of_day }}
  # How long after created do we delete orphan users
  delete_days_threshold: 14

open_requests:
  # Do we weekly check for all open requests?
  enabled: {{ sbs_open_requests_enabled }}
  cron_day_of_week: 1

scim_sweep:
  # Do we enable scim sweeps?
  enabled: {{ sbs_scim_sweep }}
  # How often do we check if scim sweeps are needed per service
  cron_minutes_expression: "*/15"

ldap:
  url: "{{ sbs_ldap_url }}"
  bind_account: "{{ sbs_ldap_bind_account }}"


# whether to fall back to TOTP MFA
mfa_fallback_enabled: {{sbs_mfa_fallback_enabled}}

# Lower case entity ID's allowed skipping MFA
mfa_idp_allowed: {{sbs_mfa_idp_allowed}}

# Lower case schachome organisations / entity ID's where SURFSecure ID is used for step-up
ssid_identity_providers: {{sbs_ssid_identity_providers}}

ssid_config_folder: saml

pam_web_sso:
  session_timeout_seconds: 300

rate_limit_totp_guesses_per_30_seconds: 10

# The uid's of user that will never be suspended or deleted
excluded_user_accounts:
{% for excluded_user in sbs_excluded_users %}
  - uid: "{{ excluded_user.uid }}"
{% endfor %}
