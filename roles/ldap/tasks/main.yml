---
# playbook to install and configure all components of the LDAP
- name: Install LDAP
  apt:
    state: "present"
    name:
      - "slapd"
      - "ldap-utils"
      - "python3-ldap"  # for ansible ldap modules
    install_recommends: false
  notify: "restart LDAP"

- name: make sure slapd can read ssl keys
  user:
    name: "openldap"
    groups: "ssl-cert"

- name: Copying alternative service script
  template:
    src: "slapd.service.j2"
    dest: "/etc/systemd/system/slapd.service"
  notify:
    - "systemd daemon-reload"
    - "restart LDAP"

- name: force restart
  meta: "flush_handlers"

- name: Ensure that a number of directories exist
  file:
    path: "{{ item }}"
    state: "directory"
    owner: "{{ ldap_user }}"
    group: "{{ ldap_group }}"
    mode: "0755"
  tags: "ldap"
  with_items:
    - "{{ ldap_ldif_dir }}"
    - "/var/run/slapd"

- name: Copy schemas
  copy:
    src: "{{ item }}"
    dest: "{{ ldap_ldif_dir }}/{{ item }}"
    mode: 0755
  with_items:
    - sczGroup.ldif
    - groupOfMembers.ldif
    - eduPerson.ldif
    - ldapPublicKey.ldif
    - eduMember.ldif
    - voPerson.ldif

- name: Generate ldif from template
  template:
    src: "{{ item }}.j2"
    dest: "{{ ldap_ldif_dir }}/{{ item }}"
    mode: 0644
  loop:
    - "set_root_credentials.ldif"
    - "enable_memberof.ldif"
    - "enable_syncrepl.ldif"
    - "enable_syncprov.ldif"
    - "enable_dynlist.ldif"
    - "enable_monitor.ldif"

- name: Generate ldap.conf
  template:
    src: ldap.conf.j2
    dest: "{{ ldap_dir }}/ldap.conf"
    mode: 0644

- name: Set indices
  ldap_attrs:
    dn: "olcDatabase={1}mdb,cn=config"
    attributes:
      olcDbIndex: "{{item}}"
    state: "present"
  with_items:
    - "entryUUID eq"
    - "o eq"
    - "dc eq"
    - "entryCSN eq"

- name: Set config
  community.general.ldap_attrs:
    dn: "cn=config"
    state: "exact"
    attributes:
      olcSizeLimit: "unlimited"
      olcLogLevel: "{{ ldap_loglevel }}"
      olcAttributeOptions: "time-"
      olcTLSCertificateKeyFile: "{{ ssl_certs_dir }}/{{ internal_base_domain }}.key"
      olcTLSCertificateFile: "{{ ssl_certs_dir }}/{{ internal_base_domain }}.crt"
      olcTLSCACertificateFile: "{{ ssl_certs_dir }}/{{ internal_base_domain }}.crt"
      olcTLSCipherSuite: >
        SECURE256:-VERS-DTLS-ALL:-VERS-SSL3.0:-VERS-TLS1.0:-VERS-TLS1.1:-RSA:-DHE-RSA:-ECDHE-RSA

- name: Ensure the schema's are added to LDAP
  ansible.builtin.script: "scripts/ldap-add {{ ldap_ldif_dir }}/{{ item }}"
  register: "result"
  failed_when: "result.rc not in [0,80]"
  changed_when: "result.rc != 80"
  loop:
    - "sczGroup.ldif"
    - "groupOfMembers.ldif"
    - "eduPerson.ldif"
    - "ldapPublicKey.ldif"
    - "eduMember.ldif"
    - "voPerson.ldif"

- name: Setup LDAP
  ansible.builtin.script: "scripts/ldap-modify {{ ldap_ldif_dir }}/{{ item }}"
  register: "result"
  failed_when: "result.rc not in [0,20,68,80]"
  changed_when: "result.rc not in [0,20]"
  loop:
    - "enable_monitor.ldif"
    - "enable_memberof.ldif"
    - "enable_dynlist.ldif"
    - "enable_syncprov.ldif"
    - "enable_syncrepl.ldif"
    - "set_root_credentials.ldif"

- name: Get uid of openldap user
  ansible.builtin.getent:
    database: "passwd"
    key: "openldap"

# store it in a nice var (so line below doesn't get too long)
- name: Save gid of openldap user
  ansible.builtin.set_fact:
    openldap_auth: "gidNumber={{ansible_facts.getent_passwd['openldap'][2]}}+\
                    uidNumber={{ansible_facts.getent_passwd['openldap'][1]}}"

- name: Set ACLs
  community.general.ldap_attrs:
    dn: "olcDatabase={1}mdb,cn=config"
    attributes:
      olcAccess:
        - >-
          to dn.regex="(([^,]+),{{ services_ldap.basedn }})$"
          by dn.exact="{{ services_ldap.binddn }}" write
          by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth write
          by dn.exact,expand="cn=admin,$1" read
          by * break
        - >-
          to *
          by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth manage
          by dn.exact={{openldap_auth}},cn=peercred,cn=external,cn=auth read
          {% if environment_name=="vm" %}
          by dn.exact=gidNumber=1000+uidNumber=1000,cn=peercred,cn=external,cn=auth manage
          {% endif %}
          by * break
        - >-
          to attrs=userPassword
          by self write
          by anonymous auth
          by * none
    state: "exact"
    ordered: true

- name: Initialize DIT
  community.general.ldap_entry:
    dn: "{{ services_ldap.basedn }}"
    state: "present"
    objectClass:
      - "top"
      - "dcObject"
      - "organization"
    attributes:
      dc: "{{ services_ldap.basedn | regex_replace('^dc=([^,]+).*', '\\1') }}"
      o: "{{ services_ldap.o }}"

- name: Initialize DIT admin
  community.general.ldap_entry:
    dn: "{{ services_ldap.binddn }}"
    objectClass: "organizationalRole"
    attributes:
      cn: "{{ services_ldap.binddn | regex_replace('^cn=([^,]+).*', '\\1') }}"

- name: Redirect slapd log to /var/log/slapd.log
  copy:
    src: "rsyslog_slapd.conf"
    dest: "/etc/rsyslog.d/slapd.conf"
  notify: "restart rsyslog"

- name: Rotate conf for slapd log file
  copy:
    src: "logrotate_slapd"
    dest: "/etc/logrotate.d/slapd"

- name: Install backup script
  template:
    src: "ldap-backup.sh.j2"
    dest: "{{backup_runparts}}/ldap-backup.sh"
    mode: "0755"
