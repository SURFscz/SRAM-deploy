---
# playbook to install and configure general components of the LDAP
- name: Copying alternative service script
  become: true
  template:
    src: "slapd.service.j2"
    dest: "/etc/systemd/system/slapd.service"
  notify:
    - systemd daemon-reload
    - restart LDAP

- name: force restart
  meta: flush_handlers

- name: Ensure that a number of directories exist
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ldap_user }}"
    group: "{{ ldap_group }}"
    mode: 0755
  tags: ldap
  with_items:
    - "{{ ldap_ldif_dir }}"

- name: Copy schemas
  become_user: "{{ ldap_user }}"
  copy:
    src: "{{ item }}"
    dest: "{{ ldap_ldif_dir }}/{{ item }}"
    mode: 0755
  with_items:
    - eduPerson.ldif
    - ldapPublicKey.ldif
    - eduMember.ldif
    - voPerson.ldif

- name: Generate ldif from template
  become_user: "{{ ldap_user }}"
  become: true
  template:
    src: "{{ item }}.j2"
    dest: "{{ ldap_ldif_dir }}/{{ item }}"
    mode: 0644
  with_items:
    - "set_loglevel_stats.ldif"
    - "enable_syncprov.ldif"
    - "enable_dynlist.ldif"

- name: Generate ldap.conf
  template:
    src: ldap.conf.j2
    dest: "{{ ldap_dir }}/ldap.conf"
    mode: 0644

- name: Set loglevel to stats
  command: ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f "{{ ldap_ldif_dir }}/set_loglevel_stats.ldif"
  # return code 20 means entry already exists
  register: result
  failed_when: result.rc != 0
  changed_when: result.rc != 0

- name: Enable synchronization
  command: ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f "{{ ldap_ldif_dir }}/enable_syncprov.ldif"
  # return code 20 means entry already exists
  register: result
  failed_when: result.rc not in [0,20,68]
  changed_when: result.rc not in [20,68]

- name: Enable dynamic lists
  command: ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f "{{ ldap_ldif_dir }}/enable_dynlist.ldif"
  # return code 20 means entry already exists
  register: result
  failed_when: result.rc not in [0,20,68]
  changed_when: result.rc != 20

- name: Remove obsolete sizelimits
  ldap_attrs:
    dn: "{{item}}"
    attributes:
      olcSizeLimit: []
    state: "exact"
  with_items:
    - "olcDatabase={-1}frontend,cn=config"
    - "cn=config"

- name: Set sizelimit
  ldap_attrs:
    dn: "olcDatabase={1}mdb,cn=config"
    attributes:
      olcSizeLimit: "unlimited"
    state: "exact"

- name: Enable tls
  community.general.ldap_attrs:
    dn: "cn=config"
    state: "exact"
    attributes:
      olcTLSCertificateKeyFile: "{{ ssl_certs_dir }}/{{ internal_base_domain }}.key"
      olcTLSCertificateFile: "{{ ssl_certs_dir }}/{{ internal_base_domain }}.crt"
      olcTLSCACertificateFile: "{{ ssl_certs_dir }}/{{ internal_base_domain }}.crt"
      olcTLSCipherSuite: >
        SECURE256:-VERS-DTLS-ALL:-VERS-SSL3.0:-VERS-TLS1.0:-VERS-TLS1.1:-RSA:-DHE-RSA:-ECDHE-RSA

# OpenLDAP does not like adding existing entries again. Only add the
# schema if it has not been added already. This does not yet take care
# of changes in the eduPerson schema.
- name: Check if eduPerson schema is already present
  shell: >
    ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:/// -b 'cn=schema,cn=config' '(cn=*)' dn
    | grep -i 'cn={[0123456789]\+}eduperson,cn=schema,cn=config'
  register:
    eduPersonSchemaPresent
  failed_when: eduPersonSchemaPresent.rc not in [0, 1]
  changed_when: False

# Based on the success or failure of copying the eduPerson schema add
# the schema to the ldap database. Copying the same file in the previous
# task, would lead to not registering the edoPersonSchema variable.
- name: Ensure the eduPerson schema is added to LDAP
  become: true
  command: >
    ldapadd -Q -Y EXTERNAL -H ldapi:///
    -f "{{ ldap_ldif_dir }}/eduPerson.ldif"
  when: eduPersonSchemaPresent.stdout == ""

- name: Check if the ldapPublicKey schema is already present
  shell: >
    ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:/// -b 'cn=schema,cn=config' '(cn=*)' dn
    | grep -i 'cn={[0-9]\+}openssh-lpk-openldap,cn=schema,cn=config'
  register:
    ldapPublicKeyTask
  failed_when: ldapPublicKeyTask.rc not in [0, 1]
  changed_when: False

- name: Ensure the ldapPublicKey schema is added to LDAP
  become: true
  command: >
    ldapadd -Q -Y EXTERNAL -H ldapi:///
    -f "{{ ldap_ldif_dir }}/ldapPublicKey.ldif"
  when: ldapPublicKeyTask.stdout == ""

- name: Check if the eduMember schema is already present
  shell: >
    ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:/// -b 'cn=schema,cn=config' '(cn=*)' dn
    | grep -i 'cn={[0-9]\+}edumember,cn=schema,cn=config'
  register:
    eduMemberTask
  failed_when: eduMemberTask.rc not in [0, 1]
  changed_when: False

- name: Ensure the eduMember schema is added to LDAP
  become: true
  command: >
    ldapadd -Q -Y EXTERNAL -H ldapi:///
    -f "{{ ldap_ldif_dir }}/eduMember.ldif"
  when: eduMemberTask.stdout == ""

- name: Check if the voPerson schema is already present
  shell: >
    ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:/// -b 'cn=schema,cn=config' '(cn=*)' dn
    | grep -i 'cn={[0-9]\+}voperson,cn=schema,cn=config'
  register:
    voPersonTask
  failed_when: voPersonTask.rc not in [0, 1]
  changed_when: False

- name: Ensure the voPerson schema is added to LDAP
  become: true
  command: >
    ldapadd -Q -Y EXTERNAL -H ldapi:///
    -f "{{ ldap_ldif_dir }}/voPerson.ldif"
  when: voPersonTask.stdout == ""

- name: Set allowed attribute options for voPerson
  ldap_attrs:
    dn: "cn=config"
    attributes:
      olcAttributeOptions: "time-"
    state: "present"

- name: Redirect slapd log to /var/log/slapd.log
  copy:
    src: rsyslog_slapd.conf
    dest: /etc/rsyslog.d/slapd.conf
  notify: restart rsyslog

- name: Rotate conf for slapd log file
  copy:
    src: logrotate_slapd
    dest: /etc/logrotate.d/slapd

- name: Install backup script
  template:
    src: ldap-backup.sh.j2
    dest: "{{backup_runparts}}/ldap-backup.sh"
    mode: 0755

