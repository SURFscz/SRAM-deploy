---
- name: Install required python packages
  apt:
    state: present
    name:
      - build-essential
      - python3
      - python3-dev
      - python3-distutils
      - python3-setuptools
      - python3-pip
    install_recommends: false

- name: Check if python in virtualenv is out of date
  shell: |
    if ! [ -e "{{ python_venv_dir }}/pyvenv.cfg" ]
    then
      echo "missing-pyvenv"
    elif [   "$(awk '/^version/{print $3}' < {{ python_venv_dir }}/pyvenv.cfg)" \
           = "$(/usr/bin/python3 --version|awk '{print $2}')" ]
    then
      echo "identical"
    else
      echo "different"
    fi
  register: 'python_venv_version_diff'
  changed_when: false

# can't remove the entire dir, because their might be other things in there ("python -m venv .")
- name: Remove out of date python venv
  file:
    path: "{{ python_venv_dir }}/{{ item }}"
    state: "absent"
  with_items:
    - "bin"
    - "include"
    - "lib"
    - "share"
    - "pyvenv.cfg"
  when: 'python_venv_version_diff.stdout != "identical"'

- name: Create virtualenv and install pip
  pip:
    name:
      - "pip        >=22.0.4, <23"
      - "setuptools >=62.1,   <63"
      - "wheel      >=0.37.1, <0.38"
    state: "present"
    virtualenv: "{{ python_venv_dir }}"
    virtualenv_command: "python3 -m venv"
  become: "{{python_venv_become}}"
  become_user: "{{python_venv_user}}"

- name: Install requirements
  pip:
    requirements: "{{ python_venv_requirements }}"
    virtualenv: "{{ python_venv_dir }}"
    state: "present"
  become: "{{python_venv_become}}"
  become_user: "{{python_venv_user}}"
