---
- name: set nameservers
  template: src=resolv.conf.j2 dest=/etc/resolv.conf force=yes
  when:
    - not is_aws
    - environment_name!="vm"

- name: fix dhclient.conf
  template: src=dhclient.conf.j2 dest=/etc/dhcp/dhclient.conf force=yes
  when:
    - is_aws
    - environment_name!="vm"
  register: dhclient

- name: Restart networking
  systemd:
    name: networking
    state: restarted
  when: dhclient.changed

- name: "disable cloud-init VMWare customization"
  lineinfile:
    path: "/etc/cloud/cloud.cfg.d/99-sram.cfg"
    line: "disable_vmware_customization: true"
  when: ansible_virtualization_type == "VMware"

- name: set localtime
  file: state=link src=/usr/share/zoneinfo/{{timezone}} dest=/etc/localtime

- name: set timezone
  template: src=timezone.j2 dest=/etc/timezone

- name: set hostname
  hostname: name={{inventory_hostname_short}}
  when:
    - environment_name!="vm"

- name: set /etc/hosts
  template: src=hosts.j2 dest=/etc/hosts force=yes
  when:
    - not is_aws
    - environment_name!="vm"

- name: check that hostname and fqdn are set up correctly
  command: "/usr/bin/hostname --fqdn"
  any_errors_fatal: true
  changed_when: false
  when:
    - environment_name!="vm"

- name: "{{'en' if enable_ipv6 else 'dis'}}able ipv6"
  template:
    src: "99-sysctl-ipv6.conf.j2"
    dest: "/etc/sysctl.d/99-sysctl-ipv6.conf"
  notify: "reload sysctl settings"

- name: "Enable dmesg for regular users"
  lineinfile:
    dest: "/etc/sysctl.d/99-user-dmesg.conf"
    create: true
    line: "kernel.dmesg_restrict = 0"
    state: present
  notify: reload sysctl settings

- name: install sudo permissions
  template: src=scz-sudo.j2 dest=/etc/sudoers.d/scz-sudo owner=root group=root mode=0600 force=yes

- name: make sure ed25519 key exists
  command:
    cmd: "ssh-keygen -f '{{item}}' -N '' -t ed25519"
    creates: "{{item}}"
  with_items:
    - "/etc/ssh/ssh_host_ed25519_key"
  notify:
    - restart sshd

# replace sshd config; we can't do it the easy way, because we're also editing it in the backup role
# TODO: cansimplify this oncewe have openssh 8.1+, which support include directives.
- name: Check if this ssd config file is managed by us
  command:
    cmd: "grep '^# BEGIN ANSIBLE MANAGED {{ role_name }}' /etc/ssh/sshd_config"
  register: sshconfig_is_managed
  changed_when: false
  failed_when: false

- name: install a fresh sshd config
  copy:
    content: ""
    dest: "/etc/ssh/sshd_config"
  when: sshconfig_is_managed.rc > 0

- name: set up ssh config
  blockinfile:
    path: "/etc/ssh/sshd_config"
    insertafter: "BOF"
    marker: "# {mark} ANSIBLE MANAGED {{ role_name }}"
    validate: "/usr/sbin/sshd -t -f '%s'"
    content: |
      {{ lookup('file','sshd_config') }}
      ChallengeResponseAuthentication {% if sshd_authn_CR %}yes{% else %}no{% endif %}
  notify:
    - restart sshd


- name: remove obsolete ssh host keys
  file:
    path: "/etc/ssh/ssh_host_{{item}}"
    state: absent
  with_items:
    - "dsa_key"
    - "dsa_key.pub"
    - "rsa_key"
    - "rsa_key.pub"
    - "ecdsa_key"
    - "ecdsa_key.pub"
  notify:
    - restart sshd
