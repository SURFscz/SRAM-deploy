{% set lb_http = loadbalancer|selectattr("protocol", "equalto", "http")|list %}
{% set lb_ldap = loadbalancer|selectattr("protocol", "equalto", "ldap")|list %}
{# add a "name" atribute to the dict #}
{% for h in lb_http %}{% set _ = h.update({'name': h['hostname'].split('.')[0]}) %}{% endfor %}
global
    log /dev/log    local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user    haproxy
    group   haproxy
    daemon

    # default is 16k, but increase because we have very large headers (feature-policy etc)
    tune.bufsize 65535

    # Default SSL material locations
    ca-base /etc/ssl/certs
{% if enable_https and use_fixed_cert %}
    crt-base {{cert_dir}}
{% elif enable_https %}
    crt-base {{letsencrypt.cert_dir}}
{% endif %}

    ssl-default-bind-ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA256
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
{% if enable_https and haproxy.custom_dhparam %}
    ssl-dh-param-file {{haproxy.dhparam_file}}
{% elif enable_https %}
    tune.ssl.default-dh-param {{haproxy.dhparam_keysize}}
{% endif %}

defaults
    log     global
    option  dontlognull
    timeout connect 4s
    timeout client  15s
    timeout server  15s
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http
    default-server ca-file {{ssl_certs_dir}}/{{internal_base_domain}}.crt

#--------------------------------------------------------------------
#  frontend
# -------------------------------------------------------------------
frontend stats
    bind localhost:81
    mode http
    stats enable
    stats uri /
    stats refresh 10s
    stats auth admin:{{haproxy_admin_secret}}
    stats admin if TRUE

frontend stats_ro
    bind *:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if FALSE

frontend fe_https
{% if enable_https %}
    bind    *:443 ssl crt-list /etc/haproxy/crt-list.txt transparent alpn h2,http/1.1
    bind [::]:443 ssl crt-list /etc/haproxy/crt-list.txt transparent alpn h2,http/1.1
{% else %}
    bind    *:80 transparent
    bind [::]:80 transparent
{% endif %}

    mode    http
    option  httplog

    # redirects
{% for host in redirect_hosts %}
    http-request redirect prefix https://{{host.to}} code 301 if { hdr(host) -i {{host.from}} }
{% endfor %}

{% if enable_https %}
    # always use https
    http-response set-header Strict-Transport-Security "max-age=16000000; includeSubDomains; preload;"

    # generic security headers
    http-response set-header X-Frame-Options "sameorigin"
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"

    # rewrite all cookies to be secure and HttpOnly
    http-response replace-header Set-Cookie (.*)(\s*;\s*(secure|httponly))* \1;secure;httponly

    # insert strict CSP if none was set
    acl has_csp_header res.hdr(Content-Security-Policy) -m found
    http-response set-header Content-Security-Policy "default-src 'self'; frame-src 'none'; form-action 'self' http://*.{{base_domain}}; frame-ancestors 'none'; block-all-mixed-content;" if !has_csp_header

    # insert strict Feature-Policy if none was set
    acl has_fp_header res.hdr(Feature-Policy) -m found
    http-response set-header Feature-Policy "accelerometer: none; ambient-light-sensor: none; autoplay: none; battery: none; camera: none; display-capture: none; document-domain: none; encrypted-media: none; execution-while-not-rendered: self; execution-while-out-of-viewport: self; fullscreen: none; geolocation: none; gyroscope: none; layout-animations: self; legacy-image-formats: none; magnetometer: none; microphone: none; midi: none; navigation-override: none; oversized-images: self; payment: none; picture-in-picture: none; publickey-credentials: self; sync-xhr: self; usb: none; vr: none; wake-lock: none; xr-spatial-tracking: none" if !has_fp_header
{% endif %}

    http-request set-header X-Forwarded-For "%[src]"
    http-request set-header X-Forwarded-Host "%[req.hdr(Host)]"
    http-request set-header X-Forwarded-Port "%[dst_port]"
{% if enable_https %}
    http-request set-header X-Forwarded-Proto "https"
    http-request set-header Forwarded "for=%[src]; proto=https; by=%[dst]"
{% else %}
    http-request set-header X-Forwarded-Proto "http"
    http-request set-header Forwarded "for=%[src]; proto=http; by=%[dst]"
{% endif %}

{% if enable_ratelimit %}
    http-request track-sc0 src table proxy_rates
    acl url_static path_end .css .js .png .jpeg .gif .ico .woff2
    acl url_static path_beg /api/images
    http-request track-sc1 url32+src table proxy_req_rates unless url_static
    acl exceeds_limit sc_gpc0_rate(0) gt 50
    acl network_allowed src {{ iprange.internal }}
    http-request sc-inc-gpc0(0) if { sc_http_req_rate(1) eq 1 } !exceeds_limit
    http-request deny deny_status 429 if exceeds_limit !network_allowed
{% endif %}

{% if iprange.vpn is defined %}
    acl vpn src {% for vpnname in iprange.vpn %}{{iprange.vpn[vpnname]}} {% endfor %}{% for vpnname in iprange.vpn6 %}{{iprange.vpn6[vpnname]}} {% endfor %}

{% endif %}

{% for host in lb_http %}
    acl acl_{{host.hostname}} hdr(host) -i {{host.hostname}}
{% if host.acl is defined %}
{% if host.acl == "VPN" %}
    http-request deny if acl_{{host.hostname}} !vpn
{% else %}
    acl acl_ip_{{host.hostname}} src 127.0.0.1 ::1 {{host.acl}}
    http-request deny if acl_{{host.hostname}} !acl_ip_{{host.hostname}}
{% endif %}
{% endif %}
    use_backend be_{{host.name}} if acl_{{host.hostname}}

{% endfor %}

{% for host in lb_http %}
backend be_{{host.name}}
    mode    http
    cookie  SERVERID insert indirect maxidle 60m secure httponly nocache
    {% for be_server in host.backend_hosts -%}
    {% set server_name = be_server.split('.')[0] -%}
    server {{server_name}} {{be_server}}:{{host.backend_port}} ssl check cookie {{be_server}}
    {% endfor %}

{% endfor %}

{% for host in lb_ldap %}
{% set name = host.hostname.split('.')[0] -%}
listen ldap_{{name}}_{{host.frontend_port}}
{% if enable_https %}
    bind    *:{{host.frontend_port}} ssl crt {{host.hostname}}/priv+fullchain.pem transparent
    bind [::]:{{host.frontend_port}} ssl crt {{host.hostname}}/priv+fullchain.pem transparent
{% else %}
    bind    *:{{host.frontend_port}} transparent
    bind [::]:{{host.frontend_port}} transparent
{% endif %}

{% for be_server in host.backend_hosts %}
{% set servername = be_server.split('.')[0] %}
    server {{servername}} {{be_server}}:{{host.backend_port}} ssl check weight 10 {% if loop.index==1 %}on-marked-up shutdown-backup-sessions{%else%}backup{%endif%}

{% endfor %}

    timeout client 900s
    timeout server 901s

    mode    tcp
    option  tcpka
    option  tcplog
    option  logasap

    option ldap-check

{% endfor %}

{% if enable_ratelimit %}
backend proxy_req_rates
        stick-table type binary len 8 size 1m expire 24h store http_req_rate(24h)
backend proxy_rates
        stick-table type ip size 1m expire 24h store gpc0,gpc0_rate(30s)
{% endif %}
