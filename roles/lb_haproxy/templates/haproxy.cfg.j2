{% set lb_http = loadbalancer|selectattr("protocol", "equalto", "http")|list %}
{% set lb_ldap = loadbalancer|selectattr("protocol", "equalto", "ldap")|list %}
global
    log /dev/log    local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 group {{haproxy_socket_group}} level admin
    stats timeout 30s
    user    haproxy
    group   haproxy
    daemon

    # default is 16k, but increase because we have very large headers (feature-policy etc)
    tune.bufsize 65535
    tune.maxrewrite 4096

    # Default SSL material locations
    ca-base /etc/ssl/certs
{% if use_fixed_cert %}
    crt-base {{cert_dir}}
{% else %}
    crt-base {{letsencrypt_cert_dir}}
{% endif %}

    ssl-default-bind-ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA256
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
{% if haproxy.custom_dhparam %}
    ssl-dh-param-file {{haproxy.dhparam_file}}
{% else %}
    tune.ssl.default-dh-param {{haproxy.dhparam_keysize}}
{% endif %}

    server-state-file {{haproxy_state_file}}

defaults
    log     global
    option  dontlognull
    timeout connect 1s
    timeout check 1s
    timeout client  {{haproxy_timeout_client}}
    timeout server  {{haproxy_timeout_server}}
    timeout tunnel  18h # websocket; timeout should > sbs session timeout
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http
    default-server ca-file {{ssl_certs_dir}}/{{internal_base_domain}}.crt
    load-server-state-from-file global

#--------------------------------------------------------------------
#  frontend
# -------------------------------------------------------------------
frontend fe_https
    bind    *:443 ssl crt-list /etc/haproxy/crt-list.txt transparent alpn h2,http/1.1
    bind [::]:443 ssl crt-list /etc/haproxy/crt-list.txt transparent alpn h2,http/1.1

    mode    http
    option  httplog

    # redirects
{% for redirect in haproxy_redirect_hosts %}
    http-request redirect prefix https://{{redirect.to}} code {{redirect.code|default('302')}} if { hdr(host) -i {{redirect.from}} }
{% endfor %}
{% for redirect in haproxy_redirect_urls %}
    http-request redirect prefix {{redirect.to}} code {{redirect.code|default('302')}} if { path -i {{redirect.path}} }
{% endfor %}

    # always use https
    http-after-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload;"

    # generic security headers
    http-response set-header X-Frame-Options "sameorigin"
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"

    # diable  mime type sniffing
    http-response set-header X-Content-Type-Options "nosniff"

    # rewrite all cookies to be secure and HttpOnly
    http-response replace-header Set-Cookie (.*)(\s*;\s*(secure|httponly))* \1;secure;httponly

    # insert strict CSP if none was set
    acl has_csp_header res.hdr(Content-Security-Policy) -m found
    http-response set-header Content-Security-Policy "default-src 'self'; base-uri 'self'; frame-src 'none'; form-action 'self' https://*.{{base_domain}}; frame-ancestors 'none'; block-all-mixed-content;" if !has_csp_header

    # insert strict Feature-Policy if none was set
    acl has_fp_header res.hdr(Permissions-Policy) -m found
    http-response set-header Permissions-Policy "accelerometer=(), ambient-light-sensor=(), autoplay=(), battery=(), camera=(), cross-origin-isolated=(), display-capture=(), document-domain=(), encrypted-media=(), execution-while-not-rendered=(), execution-while-out-of-viewport=(), fullscreen=(), geolocation=(), gyroscope=(), keyboard-map=(), magnetometer=(), microphone=(), midi=(), navigation-override=(), payment=(), picture-in-picture=(), publickey-credentials-get=(), screen-wake-lock=(), sync-xhr=(), usb=(), web-share=(), xr-spatial-tracking=(), clipboard-read=(), clipboard-write=(), gamepad=(), speaker-selection=()" if !has_fp_header

    http-request set-header X-Forwarded-For "%[src]"
    http-request set-header X-Forwarded-Host "%[req.hdr(Host)]"
    http-request set-header X-Forwarded-Port "%[dst_port]"
    http-request set-header X-Forwarded-Proto "https"
    http-request set-header Forwarded "for=%[src]; proto=https; by=%[dst]"

{% if enable_ratelimit %}
    http-request track-sc0 src table proxy_rates
    acl url_static path_end .css .js .png .jpeg .gif .ico .woff2
    acl url_static path_beg /api/images
    http-request track-sc1 url32+src table proxy_req_rates unless url_static
    acl exceeds_limit sc_gpc0_rate(0) gt 50
    acl network_allowed src {{ iprange.internal }}
    http-request sc-inc-gpc0(0) if { sc_http_req_rate(1) eq 1 } !exceeds_limit
    http-request deny deny_status 429 if exceeds_limit !network_allowed
{% endif %}

    acl vpn src --
      {%- for ip in iprange.get("vpn", {}).values() %} {{ip}}{% endfor %}
      {%- for ip in iprange.get("vpn6",{}).values() %} {{ip}}{% endfor %}


{% for host in lb_http %}
    acl acl_{{host.hostname}} hdr(host) -i {{host.hostname}}
{% if host.acl is defined %}
{% if host.acl == "VPN" %}
    http-request deny if acl_{{host.hostname}} !vpn
{% else %}
    acl acl_ip_{{host.hostname}} src 127.0.0.1 ::1 {{host.acl}}
    http-request deny if acl_{{host.hostname}} !acl_ip_{{host.hostname}}
{% endif %}
{% endif %}
    use_backend {{host.name}} if acl_{{host.hostname}}

{% endfor %}

{% for host in lb_http %}
backend {{host.name}}
    mode http
{% if host.options is defined %}
{% for option, value in host.options.items() %}
    {{option}} {{value}}
{% endfor %}
{% endif %}
    {% for be_server in host.backend_hosts -%}
    {% set colour = "blue"  if "blue"  in groups and be_server in groups["blue"]  else
                    "green" if "green" in groups and be_server in groups["green"] else
                    "server" -%}
    {% set server_name = "{}-{}".format(colour, loop.index) -%}
    server {{server_name}} {{be_server}}:{{host.backend_port}} ssl check
    {% endfor %}

{% endfor %}

{% for host in lb_ldap %}
{% set name = "{}".format(host.hostname.split('.')[0]) -%}
listen {{name}}
    no option dontlognull
    bind    *:{{host.frontend_port}} ssl crt {{host.hostname}}/priv+fullchain.pem transparent
    bind [::]:{{host.frontend_port}} ssl crt {{host.hostname}}/priv+fullchain.pem transparent

    {% for be_server in host.backend_hosts -%}
    {% set colour = "blue"  if "blue"  in groups and be_server in groups["blue"]  else
                    "green" if "green" in groups and be_server in groups["green"] else
                    "server" -%}
    {% set server_name = "{}-{}".format(colour, loop.index) -%}
    server {{server_name}} {{be_server}}:{{host.backend_port}} ssl check weight 10 {% if loop.index==1 %}on-marked-up shutdown-backup-sessions{%else%}backup{%endif%}

    {% endfor %}

    acl ldap_sbs_allow src -f {{ haproxy_ldap_acl_file }}
    acl ldap_local_allow src 127.0.0.1 ::1 {{ iprange.internal }}
    acl ldap_vpn_allow src --
      {%- for ip in iprange.get("vpn", {}).values() %} {{ip}}{% endfor %}
      {%- for ip in iprange.get("vpn6",{}).values() %} {{ip}}{% endfor %}

    tcp-request content reject unless ldap_sbs_allow or ldap_local_allow or ldap_vpn_allow

    timeout client 900s
    timeout server 901s

    mode    tcp
    option  tcpka
    option  tcplog
    option  logasap

    option ldap-check

{% endfor %}

{% if enable_ratelimit %}
backend proxy_req_rates
        stick-table type binary len 8 size 1m expire 24h store http_req_rate(24h)
backend proxy_rates
        stick-table type ip size 1m expire 24h store gpc0,gpc0_rate(30s)
{% endif %}

frontend stats
    bind localhost:81
    mode http
    stats enable
    stats uri /
    stats refresh 10s
    stats auth admin:{{haproxy_admin_secret}}
    stats admin if TRUE

frontend stats_ro
    bind *:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if FALSE

