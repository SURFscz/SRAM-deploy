# install a haproxy on the load balancer
---

##########################################
## handle generation of dh params
##
- name: install packages
  apt:
    name: openssl
    state: present
  when: haproxy.custom_dhparam

# TODO: get rid of this (not recommended by NCSC)
- name: generate Diffie-Hellman group
  command: openssl dhparam -out {{ haproxy.dhparam_file }} {{ haproxy.dhparam_keysize }}
  args:
    creates: "{{ haproxy.dhparam_file }}"
  notify:
    - "restart haproxy"
  when: haproxy.custom_dhparam


- name: create group for haproxy socket access
  group:
    name: "{{haproxy_socket_group}}"
    state: "present"
    system: True

##########################################
## produce warning
##
- name: check if we are using letsencrypt
  fail:
    msg: "Letsencrypt certificates are not currently supported for the lb"
  when: not use_fixed_cert

##########################################
## install haproxy
##
- name: install haproxy
  apt:
    name:
      - haproxy
      - socat
      - fping
    state: present

- name: install haproxy config
  template:
    src: "haproxy.cfg.j2"
    dest: "/etc/haproxy/haproxy.cfg"
    mode: "0640"
    owner: "root"
    group: "haproxy"
  no_log: "{{sram_ansible_nolog}}"
  notify:
    - "restart haproxy"

- name: Create LDAP ACL file
  copy:
    content: ""
    dest: "{{haproxy_ldap_acl_file}}"
    force: false
    owner: "root"
    group: "haproxy"
    mode: "0660"

- name: install haproxy certificate list
  template:
    src: "crt-list.txt.j2"
    dest: "/etc/haproxy/crt-list.txt"
    mode: "0644"
    owner: "root"
    group: "root"
  notify:
    - "restart haproxy"

- name: install haproxy state script
  template:
    src: "save-state.sh.j2"
    dest: "/etc/haproxy/save-state.sh"
    mode: "0755"
    owner: "root"
    group: "root"

- name: install haproxy error page
  template:
    src: "error_sram_down.html.j2"
    dest: "/etc/haproxy/errors/503.http"
  notify: "restart haproxy"

- name: check error pages for max file size
  stat:
    path: "/etc/haproxy/errors/{{item}}.http"
  register: "st"
  failed_when: "st.stat.size > 65419"
  loop: [ 400, 403, 408, 500, 502, 503, 504 ]

- block:
    - name: Create bin directory
      file:
        path: "{{haproxy_oscp_bin_dir}}"
        state: "directory"

    - name: Copy ocsp script
      copy:
        src: ocsp.sh
        dest: "{{haproxy_oscp_bin_dir}}"
        mode: "0755"
      notify:
        - "run ocsp update"

    - name: Copy ocsp service files
      template:
        src: "{{item}}.j2"
        dest: "/etc/systemd/system/{{item}}"
      with_items:
        - "ocsp.service"
        - "ocsp.timer"
      notify:
        - "systemd daemon-reload"
        - "enable ocsp job"
        - "run ocsp update"

    - name: Copy ocsp service files for certbot/letsencrypt
      template:
        src: "ocsp-letsencrypt.j2"
        dest: "/etc/letsencrypt/renewal-hooks/post/"
        mode: '0755'
  when: "not is_dev"

- name: create override dir
  file:
    path: "/etc/systemd/system/haproxy.service.d/"
    state: "directory"

- name: haproxy systemd override files
  copy:
    src: "{{item}}"
    dest: "/etc/systemd/system/haproxy.service.d/"
  with_items:
    - "haproxy-log-bindmount.conf"
    - "haproxy-state.conf"
  notify:
    - "systemd daemon-reload"
    - "restart haproxy"



- name: remove aclsync scripts
  file:
    path: "{{item}}"
    state: "absent"
  with_items:
    - "/opt/aclsync"
    - "/etc/systemd/system/sram_aclsync.timer"
    - "/etc/systemd/system/sram_aclsync.service"

- name: stop aclsync service
  systemd:
    name: "{{item}}"
    state: "stopped"
    enabled: false
  with_items:
    - "sram_aclsync.timer"
    - "sram_aclsync.service"
  register: "aclsync_service_result"
  failed_when: >
    aclsync_service_result is failed
    and 'Could not find the requested' not in aclsync_service_result.msg
