---
# playbook to install and configure all components of the LDAP
- name: Install LDAP utils
  apt:
    state: "present"
    name:
      # - "slapd"
      # - "ldap-utils"
      - "python3-ldap"  # for ansible ldap modules
    install_recommends: false
#   notify: "restart LDAP"
#
# - name: remove obsolete logging config
#   file:
#     path: "{{ item }}"
#     state: absent
#   loop:
#     - "/etc/rsyslog.d/slapd.conf"
#     - "/etc/logrotate.d/slapd"
#
# - name: make sure slapd can read ssl keys
#   user:
#     name: "openldap"
#     groups: "ssl-cert"
#     append: true
#     shell: "/usr/sbin/nologin"
#
#
# - name: Copying alternative service script
#   template:
#     src: "slapd.service.j2"
#     dest: "/etc/systemd/system/slapd.service"
#   notify:
#     - "systemd daemon-reload"
#     - "restart LDAP"
#
# - name: force restart
#   meta: "flush_handlers"
#
- name: Ensure that a number of directories exist
  file:
    path: "{{ item.path }}"
    state: "directory"
    # owner: "{{ ldap_user }}"
    # group: "{{ ldap_group }}"
    mode: "{{ item.mode }}"
  # tags: "ldap"
  with_items:
    - { path: "{{ldap_ldif_dir}}",  mode: "0755" }
    - { path: "{{ldap_certs_dir}}", mode: "0755" }
    - { path: "{{ldap_data_dir}}",  mode: "0777" }
  notify: Restart the ldap container

- name: Copy schemas
  copy:
    src: "{{ item }}"
    dest: "{{ ldap_ldif_dir }}/{{ item }}"
    mode: "0644"
  with_items:
    - sczGroup.ldif
    - groupOfMembers.ldif
    - eduPerson.ldif
    - ldapPublicKey.ldif
    - eduMember.ldif
    - voPerson.ldif
    - sramPerson.ldif
  notify: Restart the ldap container

# - name: Copy DH params
#   copy:
#     src: "{{ item }}"
#     dest: "{{ ldap_certs_dir }}/{{ item }}"
#     mode: "0644"
#   with_items:
#     - dh_params

# - name: Create wildcard backend key
#   copy:
#     content: "{{wildcard_backend_cert.priv}}"
#     dest: "{{ldap_certs_dir}}/backend.key"
#     # owner: "root"
#     # group: "ssl-cert"
#     mode: "0644"
#   no_log: "{{sram_ansible_nolog}}"
#   notify: Restart the ldap container

# - name: Create wildcard backend cert
#   copy:
#     content: "{{wildcard_backend_cert.pub}}"
#     dest: "{{ldap_certs_dir}}/backend.crt"
#     # owner: "root"
#     # group: "root"
#     mode: "0644"
#   notify: Restart the ldap container

# cert is used for communication between ldap for sync
# is generated in roles/certificates/tasks/main.yml
- name: Copy wildcard frontend cert
  copy:
    src: "/etc/ssl/certs/sram-https.pem"   # was installed here by update-ca-certificates
    remote_src: true
    dest: "{{ldap_certs_dir}}/frontend.crt"
    mode: "0644"
  when: "is_docker"  # TODO: wrong name; we mean: "is local dev env"
  notify: Restart the ldap container

- name: Create the ldap container
  docker_container:
    name: "{{ containers.ldap }}"
    image: "{{ images.ldap }}"
    restart_policy: "always"
    state: started
    # pull: true
    ports:
      - 389:1389
    #   - 636:1636
    env:
      LDAP_ROOT: "{{ services_ldap.basedn }}"
      LDAP_ADMIN_USERNAME: admin
      LDAP_ADMIN_PASSWORD: "{{ services_ldap_password }}"
      LDAP_CONFIG_ADMIN_USERNAME: admin
      LDAP_CONFIG_ADMIN_PASSWORD: "{{ services_ldap_password }}"
      LDAP_CONFIG_ADMIN_ENABLED: "yes"
      LDAP_CUSTOM_SCHEMA_DIR: "/opt/ldap/schema"
      # LDAP_EXTRA_SCHEMAS: "cosine,inetorgperson,nis,dyngroup"
      LDAP_SKIP_DEFAULT_TREE: "yes"
      # LDAP_USERS: ""
      # LDAP_PASSWORDS: ""
      LDAP_ENABLE_SYNCPROV: "yes"
      # LDAP_ENABLE_TLS: "yes"
      LDAP_ENABLE_TLS: "no"
      # TLS settings (including CA) are discarded if LDAP_ENABLE_TLS=no
      # LDAP_REQUIRE_TLS: "no"
      # LDAP_LDAPS_PORT_NUMBER: 1636
      # LDAP_TLS_CERT_FILE: "/opt/ldap/certs/backend.crt"
      # LDAP_TLS_KEY_FILE:  "/opt/ldap/certs/backend.key"
      # LDAP_TLS_CA_FILE:   "/opt/ldap/certs/frontend.crt"
      # LDAP_TLS_DH_PARAMS_FILE: "{{ ldap_certs_dir }}/dh_params"
    etc_hosts: "{{ ldap_hosts }}"
    volumes:
      - "{{ ldap_ldif_dir }}:/opt/ldap/schema"
      - "{{ ldap_certs_dir }}:/opt/ldap/certs"
      - "{{ ldap_data_dir }}:/bitnami/openldap"
    networks:
      - name: "{{internal_network}}"
      - name: "{{traefik_network}}"
    labels:
      traefik.enable: "true"
      traefik.docker.network: "{{traefik_network}}"
      traefik.tcp.routers.ldap.entrypoints: "ldaps"
      traefik.tcp.routers.ldap.rule: "HostSNI(`*`)"
      traefik.tcp.routers.ldap.tls: "true"
      # traefik.tcp.routers.ldap.service: "ldap"
      traefik.tcp.services.ldap.loadbalancer.server.port: "1389"
  register: "ldap_container"

- name: Generate ldap.conf
  template:
    src: ldap.conf.j2
    dest: "/etc/ldap/ldap.conf"
    mode: "0644"

- name: Wait for LDAP initialization
  ansible.builtin.wait_for:
    path: "{{ ldap_data_dir }}/slapd.d/cn=config/olcDatabase={0}config.ldif"
    search_regex: olcRootDN

- name: Wait for 5 seconds
  ansible.builtin.wait_for:
    timeout: 5
  when: "ldap_container is changed"

- name: Set indices
  community.general.ldap_attrs:
    dn: "olcDatabase={2}mdb,cn=config"
    attributes:
      olcDbIndex: "{{item}}"
    state: "present"
    bind_dn: "cn=admin,cn=config"
    bind_pw: "{{ services_ldap_password }}"
    server_uri: "{{ ldap_uri }}"
  with_items:
    - "entryUUID eq"
    - "o eq"
    - "dc eq"
    - "entryCSN eq"

- name: Set olcDatabase={-1}frontend olcSizeLimit
  community.general.ldap_attrs:
    dn: "olcDatabase={-1}frontend,cn=config"
    state: "exact"
    attributes:
      olcSizeLimit: "unlimited"
    bind_dn: "cn=admin,cn=config"
    bind_pw: "{{ services_ldap_password }}"
    server_uri: "{{ ldap_uri }}"

# - name: Set config olcTLSCipherSuite
#   community.general.ldap_attrs:
#     dn: "cn=config"
#     state: "exact"
#     attributes:
#       olcTLSCipherSuite: "ALL:!NULL"
#     bind_dn: "cn=admin,cn=config"
#     bind_pw: "{{ services_ldap_password }}"
#     server_uri: "{{ ldap_uri }}"

- name: Set config
  community.general.ldap_attrs:
    dn: "cn=config"
    state: "present"
    attributes:
      olcServerID: "{{ ldap_server_id }}"
      olcSizeLimit: "unlimited"
      olcLogLevel: "{{ ldap_loglevel }}"
      olcAttributeOptions: "time-"
    bind_dn: "cn=admin,cn=config"
    bind_pw: "{{ services_ldap_password }}"
    server_uri: "{{ ldap_uri }}"

# cert is used for communication between ldap for sync
# is generated in roles/certificates/tasks/main.yml
- name: Set TLS config
  community.general.ldap_attrs:
    dn: "cn=config"
    state: "exact"
    attributes:
      olcTLSCACertificateFile: "/opt/ldap/certs/frontend.crt"
    bind_dn: "cn=admin,cn=config"
    bind_pw: "{{ services_ldap_password }}"
    server_uri: "{{ ldap_uri }}"
  when: "is_docker"


# - name: Ensure the schemas are added to LDAP
#   ansible.builtin.script: "scripts/ldap-add {{ ldap_ldif_dir }}/{{ item }}"
#   register: "result"
#   failed_when: "result.rc not in [0,80]"
#   changed_when: "result.rc != 80"
#   loop:
#     - "sczGroup.ldif"
#     - "groupOfMembers.ldif"
#     - "eduPerson.ldif"
#     - "ldapPublicKey.ldif"
#     - "eduMember.ldif"
#     - "voPerson.ldif"
#     - "sramPerson.ldif"
#

- name: Setup Modules
  community.general.ldap_attrs:
    dn: cn=module{1},cn=config
    attributes:
      olcModuleLoad:
        # - syncprov
        # - back_monitor
        # - memberof.so
        # - refint.so
        - dynlist.so
    bind_dn: "cn=admin,cn=config"
    bind_pw: "{{ services_ldap_password }}"
    server_uri: "{{ ldap_uri }}"

# - name: Setup Monitor
#   community.general.ldap_entry:
#     dn: olcdatabase=monitor,cn=config
#     objectClass: olcDatabaseConfig
#     attributes:
#       olcRootDN: "cn=admin,cn=Monitor"
#       olcRootPW: "{{ '%s' | format(monitor_ldap_password) |  slapd_hash }}"
#

# - name: Setup MemberOf(1)
#   community.general.ldap_entry:
#     dn: olcOverlay=memberof,olcDatabase={2}mdb,cn=config
#     objectClass:
#       - olcOverlayConfig
#       - olcMemberOf
#     attributes:
#       olcMemberOfRefInt: "TRUE"
#       olcMemberOfGroupOC: groupOfMembers
#       olcMemberOfMemberAD: member
#       olcMemberOfMemberOfAD: memberOf
#     bind_dn: "cn=admin,cn=config"
#     bind_pw: "{{ services_ldap_password }}"
#     server_uri: "{{ ldap_uri }}"
#
# - name: Setup MemberOf(2)
#   community.general.ldap_entry:
#     dn: olcOverlay=refint,olcDatabase={2}mdb,cn=config
#     objectClass:
#       - olcOverlayConfig
#       - olcRefintConfig
#     attributes:
#       olcRefintAttribute: memberof member
#     bind_dn: "cn=admin,cn=config"
#     bind_pw: "{{ services_ldap_password }}"
#     server_uri: "{{ ldap_uri }}"

- name: Setup Dynlist
  community.general.ldap_entry:
    dn: olcOverlay=dynlist,olcDatabase={2}mdb,cn=config
    objectClass:
      - olcOverlayConfig
      - olcDynamicList
    attributes:
      olcDlAttrSet: "voPerson labeledURI member+memberOf@groupOfMembers"
    bind_dn: "cn=admin,cn=config"
    bind_pw: "{{ services_ldap_password }}"
    server_uri: "{{ ldap_uri }}"

- name: Setup Syncprov
  community.general.ldap_entry:
    dn: olcOverlay=syncprov,olcDatabase={2}mdb,cn=config
    objectClass:
      - olcOverlayConfig
      - olcSyncProvConfig
    attributes:
      olcSpCheckpoint: 100 10
      olcSpSessionLog: 100
    bind_dn: "cn=admin,cn=config"
    bind_pw: "{{ services_ldap_password }}"
    server_uri: "{{ ldap_uri }}"

# - name: Setup main database
#   community.general.ldap_attrs:
#     dn: olcDatabase={1}mdb,cn=config
#     attributes:
#       olcSuffix: "{{ services_ldap.basedn }}"
#       olcRootDN: "{{ services_ldap.binddn }}"
#       olcRootPW: "{{ '%s' | format(services_ldap_password) |  slapd_hash }}"
#     state: exact
#
# - name: Set root credentials
#   community.general.ldap_attrs:
#     dn: olcDatabase={0}config,cn=config
#     attributes:
#       olcAccess: >-
#           {0}to *
#           by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth manage
#           {% if environment_name=="vm" %}
#           by dn.exact=gidNumber=1000+uidNumber=1000,cn=peercred,cn=external,cn=auth manage
#           {% endif %}
#           by dn.exact="{{ services_ldap.binddn }}" manage
#           by * break
#     state: exact
#     bind_dn: "cn=admin,cn=config"
#     bind_pw: "{{ services_ldap_password }}"
#     server_uri: "{{ ldap_uri }}"
#
#
# - name: Get uid of openldap user
#   ansible.builtin.getent:
#     database: "passwd"
#     key: "openldap"
#
# # store it in a nice var (so line below doesn't get too long)
# - name: Save gid of openldap user
#   ansible.builtin.set_fact:
#     openldap_auth: "gidNumber={{ansible_facts.getent_passwd['openldap'][2]}}+\
#                     uidNumber={{ansible_facts.getent_passwd['openldap'][1]}}"
#

- name: Set ACLs
  community.general.ldap_attrs:
    dn: "olcDatabase={2}mdb,cn=config"
    attributes:
      olcAccess:
        - >-
          to dn.regex="(([^,]+),{{ services_ldap.basedn }})$"
          by dn.exact="{{ services_ldap.binddn }}" write
          by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth write
          by dn.exact,expand="cn=admin,$1" read
          by * break
        - >-
          to *
          by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth manage
          by dn.regex="cn=[^,]+,{{ services_ldap.basedn }}" read
          {% if environment_name=="vm" %}
          by dn.exact=gidNumber=1000+uidNumber=1000,cn=peercred,cn=external,cn=auth manage
          {% endif %}
          by * break
        - >-
          to attrs=userPassword
          by self write
          by anonymous auth
          by * break
    state: exact
    ordered: true
    bind_dn: "cn=admin,cn=config"
    bind_pw: "{{ services_ldap_password }}"
    server_uri: "{{ ldap_uri }}"

# ldap_rids:
#   101: ldaps://ldap1.scz-vm.net/
#   102: ldaps://ldap2.scz-vm.net/

- name: Setup rids
  vars:
    rid: >-
      rid={}
      provider="{}"
      searchbase="{{ services_ldap.basedn }}"
      type=refreshAndPersist
      bindmethod=simple
      binddn="{{ services_ldap.binddn }}"
      credentials={{ services_ldap_password }}
      retry="30 +"
      timeout=30
      network-timeout=5
    rids: []
  set_fact:
    rids: "{{ rids  + [ rid.format(item.key, item.value) ] }}"
  with_dict: "{{ ldap_rids }}"

- name: Setup Syncrepl
  community.general.ldap_attrs:
    dn: olcDatabase={2}mdb,cn=config
    attributes:
      olcSyncrepl: "{{ rids }}"
      olcMirrorMode: "TRUE"
    bind_dn: "cn=admin,cn=config"
    bind_pw: "{{ services_ldap_password }}"
    server_uri: "{{ ldap_uri }}"
#  when: inventory_hostname in groups['ldap_secondary']

- name: Initialize DIT
  community.general.ldap_entry:
    dn: "{{ services_ldap.basedn }}"
    state: "present"
    objectClass:
      - "top"
      - "dcObject"
      - "organization"
    attributes:
      dc: "{{ services_ldap.basedn | regex_replace('^dc=([^,]+).*', '\\1') }}"
      o: "{{ services_ldap.o }}"
    bind_dn: "{{ services_ldap.binddn }}"
    bind_pw: "{{ services_ldap_password }}"
    server_uri: "{{ ldap_uri }}"
  # when: >
  #     inventory_hostname in groups['ldap_primary']

- name: Add ldap admins
  include_tasks: "admins.yml"
  # when: >
  #     inventory_hostname in groups['ldap_primary']
#
# - name: Install backup script
#   template:
#     src: "ldap-backup.sh.j2"
#     dest: "{{backup_runparts}}/ldap-backup.sh"
#     mode: "0755"
