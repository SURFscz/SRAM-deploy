---
# - name: Initialize DIT admin
#   community.general.ldap_entry:
#     dn: "{{ services_ldap.binddn }}"
#     objectClass: organizationalRole
#     attributes:
#       cn: "{{ services_ldap.binddn | regex_replace('^cn=([^,]+).*', '\\1') }}"

# determine which users need to be admin
# check for each role of each user if it leads to membership of group {{ldap_admin_group}}
- name: determine ldap admins
  set_fact:
    ldap_admins: "{{ ldap_admins | default([]) + [item.0] }}"
  when: ldap_admin_group in role_to_groups[item.1] or ldap_admin_group in item.0.groups
  loop: "{{ users | subelements('roles') }}"

# Find existing ldap admins
- name: Initialize admins (I)
  community.general.ldap_search:
    dn: "{{ services_ldap.basedn }}"
    scope: "onelevel"
    filter: "(objectClass=organizationalRole)"
    attrs:
      - "cn"
    bind_dn: "{{ services_ldap.binddn }}"
    bind_pw: adminpassword
    server_uri: ldap:///
  register: "existing_ldap_admins_result"

# ansible sucks like this: we need to extract the results from the result
- name: Initialize admins (Ia)
  set_fact:
    existing_ldap_admins: "{{ existing_ldap_admins_result.results }}"

- debug:
    var: "existing_ldap_admins"
- debug:
    var: "ldap_admins"

# Remove LDAP non-admins
- name: Initialize admins (II)
  community.general.ldap_entry:
    dn: "cn={{ item.cn }},{{ services_ldap.basedn }}"
    state: absent
    bind_dn: "{{ services_ldap.binddn }}"
    bind_pw: adminpassword
    server_uri: ldap:///
  when: >
    item.cn not in ldap_admins | map(attribute='uid')
    and item.cn != 'admin'
  loop: "{{existing_ldap_admins}}"

# Insert LDAP admins
- name: Initialize admins (III)
  community.general.ldap_entry:
    dn: "cn={{ item.uid }},{{ services_ldap.basedn }}"
    objectClass:
      - simpleSecurityObject
      - organizationalRole
    attributes:
      description: An LDAP administrator
      userPassword: "{CRYPT}{{ item.pw_hash }}"
    bind_dn: "{{ services_ldap.binddn }}"
    bind_pw: adminpassword
    server_uri: ldap:///
  loop: "{{ ldap_admins }}"

# Make sure passwords are updated for existing admins
- name: Initialize admins (IV)
  community.general.ldap_attrs:
    dn: "cn={{ item.uid }},{{ services_ldap.basedn }}"
    attributes:
      userPassword: "{CRYPT}{{ item.pw_hash }}"
    bind_dn: "{{ services_ldap.binddn }}"
    bind_pw: adminpassword
    server_uri: ldap:///
  loop: "{{ ldap_admins }}"

