---
- name: install certbot
  apt:
    name: "certbot"
    state: "present"

- name: write certbot config for all domains
  template:
    src: "certbot.conf.j2"
    dest: "/etc/letsencrypt/cli.ini"
  notify: "renew letsencrypt certificates"

- name: create webroot for acme challenges
  file:
    dest: "{{letsencrypt_challenge_dir}}"
    state: "directory"
    owner: "root"
    group: "www-data"
    mode: "0755"
  notify: "renew letsencrypt certificates"


- name: "letsencrypt"
  when: "letsencrypt_enabled and letsencrypt_hosts is defined"
  block:

    - name: register account (letsencrypt)
      command: "/usr/bin/certbot register"
      args:
        creates: "{{letsencrypt_account_dir}}\
                  /{{ 'acme-staging-v02.api.letsencrypt.org' \
                      if letsencrypt_staging
                      else 'acme-v02.api.letsencrypt.org' }}\
                  /directory"
      notify: "renew letsencrypt certificates"
      when: "letsencrypt_server is not defined"

    - name: register account
      command: >
        /usr/bin/certbot register
                        --server '{{letsencrypt_server}}'
                          {% if letsencrypt_eab_keyid is defined %}
                          --eab-kid '{{letsencrypt_eab_keyid}}'
                          --eab-hmac-key '{{letsencrypt_eab_hmac}}'
                          {% endif %}
      args:
        # NB: this is a hack to get the account dir from the server URL:
        #     basically strip protocol up to //
        creates: "{{letsencrypt_account_dir}}/\
                  {{ '/'.join(letsencrypt_server.split('/')[2:]) }}"
      notify: "renew letsencrypt certificates"
      when: "letsencrypt_server is defined"

    - name: check if server of current cert matches current letsencrypt server
      lineinfile:
        path: "{{letsencrypt_account_dir}}/../renewal/{{item}}.conf"
        regexp: "^server *= *{{ letsencrypt_server | regex_escape() }}"
        state: "absent"
      check_mode: true
      changed_when: false
      loop: "{{letsencrypt_hosts}}"
      register: "letsencrypt_server_match"

    # set var to true of if any of the hosts has a new acme server
    - set_fact:
        letsencrypt_server_changed: |
          {{ ( letsencrypt_server_match.results | map(attribute='found', default=0) | min ) == 0 }}

    - name: check for new certs to generate
      stat:
        path: "{{letsencrypt_cert_dir}}/{{item}}"
      register: "no_cert_yet"
      changed_when: "not no_cert_yet.stat.exists"
      with_items: "{{letsencrypt_hosts}}"
      notify: "renew letsencrypt certificates"

    - name: generate acme certificates
      command:
        cmd: >
          /usr/bin/certbot certonly --noninteractive
                                    {% if letsencrypt_server is defined %}
                                      --server '{{letsencrypt_server}}'
                                    {% endif %}
                                    --force-renewal
                                    --renew-with-new-domains
                                    --domains={{item}}
      register: result
      changed_when: "'Certificate is saved at' in result.stdout"
      with_items: "{{ letsencrypt_hosts }}"
      when: "letsencrypt_server_changed or no_cert_yet.changed"
      notify: "renew letsencrypt certificates again"

    - name: set renewal time for harica cert
      lineinfile:
        path: "{{letsencrypt_account_dir}}/../renewal/{{item}}.conf"
        regex: "^#? *renew_before_expiry *="
        line: "renew_before_expiry = 330 days"
        state: "present"
      when: "'harica' in letsencrypt_server"
      loop: "{{letsencrypt_hosts}}"
