---
# playbook to setup services LDAP DIT
- name: Install LDAP
  apt:
    state: present
    name:
      - slapd
      - ldap-utils
      - python-ldap  # for ansible ldap modules
      - python3-ldap  # for ansible ldap modules
    install_recommends: no
  notify: restart LDAP

- name: make sure slapd can read ssl keys
  user:
    name: openldap
    groups: ssl-cert

- name: Ensure that a number of directories exist
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ldap_user }}"
    group: "{{ ldap_group }}"
    mode: 0755
  tags: ldap
  with_items:
    - "{{ ldap_ldif_dir }}"
    - /var/run/slapd

- name: Copy schema(s)
  become_user: "{{ ldap_user }}"
  copy:
    src: "{{ item }}"
    dest: "{{ ldap_ldif_dir }}/{{ item }}"
    mode: 0755
  with_items:
    - sczGroup.ldif
    - groupOfMembers.ldif

- name: Generate ldif from template
  become_user: "{{ ldap_user }}"
  become: true
  template:
    src: "{{ item.src }}"
    dest: "{{ ldap_ldif_dir }}/{{ item.dest }}"
    mode: 0644
  with_items:
    - { src: "set_root_credentials.ldif.j2", dest: "set_root_credentials.ldif" }
    - { src: "initial_setup.ldif.j2",        dest: "initial_setup.ldif" }
    - { src: "enable_memberof.ldif.j2",      dest: "enable_memberof.ldif" }
    - { src: "enable_syncrepl.ldif.j2",      dest: "enable_syncrepl.ldif" }
  no_log: true

- name: Ensure the ldap admin credentials are set
  command: >
    ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f "{{ ldap_ldif_dir }}/set_root_credentials.ldif"
  # return code 20 means entry already exists
  register: result
  failed_when: result.rc not in [0,20,68]
  changed_when: result.rc not in [0,20,68]

- name: Check if DIT has been created before
  command: >
    ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:/// -b "{{ services_ldap.basedn }}" "(cn=admin)" dn
  register: emptyDIT
  failed_when: emptyDIT.rc not in [0, 32]
  changed_when: False

  #ldapadd -c -x -D "{{ services_ldap.binddn }}" -w "{{ services_ldap_password }}"

- name: Initialize DIT
  command: >
    ldapadd -Q -Y EXTERNAL -H ldapi:///
    -f "{{ ldap_ldif_dir }}/initial_setup.ldif"
  register: result
  failed_when: result.rc not in [0,20,68]
  changed_when: result.rc not in [20,68]
  tags: ldap
  when: emptyDIT.stdout == ""

- name: Check if the groupOfMembers schema is already present
  shell: >
    ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:/// -b 'cn=schema,cn=config' '(cn=*)' dn
    | grep -i 'cn={[0-9]\+}groupOfMembers,cn=schema,cn=config'
  register:
    groupOfMembersTask
  failed_when: groupOfMembersTask.rc not in [0, 1]
  changed_when: False

- name: Ensure the groupOfMembers schema is added to LDAP
  become: true
  command: >
    ldapadd -Q -Y EXTERNAL -H ldapi:///
    -f "{{ ldap_ldif_dir }}/groupOfMembers.ldif"
  when: groupOfMembersTask.stdout == ""

- name: Enable memberof/refint overlay
  command: >
    ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f "{{ ldap_ldif_dir }}/enable_memberof.ldif"
  # return code 20 means entry already exists
  register: result
  failed_when: result.rc not in [0,20,68]
  changed_when: result.rc not in [20,68]

- name: Configure memberof overlay
  ldap_attrs:
    dn: "olcOverlay={0}memberof,olcDatabase={1}mdb,cn=config"
    state: 'exact'
    name: "{{item.key}}"
    values: "{{item.value}}"
  with_dict:
    olcMemberOfRefInt: "TRUE"
    olcMemberOfGroupOC: "groupOfMembers"
    olcMemberOfMemberAD: "member"
    olcMemberOfMemberOfAD: "memberOf"

- name: Configure syncrepl overlay
  command: >
    ldapmodify -Q -Y EXTERNAL -H ldapi:/// -c -f "{{ ldap_ldif_dir }}/enable_syncrepl.ldif"
  # return code 20 means entry already exists
  register: result
  failed_when: result.rc not in [0,20,68]
  changed_when: result.rc not in [20,68]
