---
- hosts: all
  serial: 20
  gather_facts: false
  tags: always
  become: false
  tasks:
    - name: Read user secrets
      include_vars: "{{ secrets_users_file }}"
    - name: Read vars from secrets file
      include_vars: "{{ secrets_file }}"
    - name: Get local git version of deploy and inventory
      local_action:
        module: "command"
        cmd: "git log --pretty=format:'%h%d' -n1"
        chdir: "{{item}}"
      with_items: ["{{playbook_dir}}","{{inventory_dir}}"]
      register: git_version
      changed_when: false
      run_once: true

- hosts: all
  serial: 20
  gather_facts: true
  tags: always
  become: false
  tasks:
    - name: set local time
      run_once: true
      set_fact:
        local_time: "{{ansible_date_time.iso8601}}"

# first gather facts from all hosts that we're actually deploying to
# TODO: this is not aggressive enough; we need to gather facts from _all_
#       hosts, even if we're limiting the actual deployments
- hosts: all
  tags: always
  become: yes
  serial: 20
  no_log: "{{sram_ansible_nolog}}}"
  gather_facts: true

# to run the debug target, specify --extra-vars="debug=true" / -e debug=1
- hosts: all
  gather_facts: false
  roles:
    - role: debug
      tags: ['debug']
      when: "debug | default('false') | bool"

- name: "common"
  hosts: all
  tasks:
    - { import_tasks: "tasks/versions.yml", tags: "always"     }
  roles:
    - { role: basic,          tags: ['common','basic']                               }
    - { role: certificates,   tags: ['common','cert']                                }
    - { role: apt,            tags: ['common','apt']                                 }
    - { role: logging,        tags: ['common','logging']                             }
    - { role: firewall,       tags: ['common','firewall'],     when: "not is_docker" }
    - { role: ntp,            tags: ['common','ntp']                                 }
    - { role: users,          tags: ['common','users']                               }
    - { role: mail,           tags: ['common','mail']                                }
    - { role: backups,        tags: ['common','backups']                             }
    - { role: zabbix-agent,   tags: ['common','zabbix-agent'],                       }

- name: "bhr2"
  hosts: "bhr2"
  roles:
    - { role: backup_collector,  tags: ['bhr2','backup_collector']                        }
    - { role: logging_collector, tags: ['bhr2','logging_collector']                       }
    - { role: zabbix-server,     tags: ['bhr2','zabbix-server'],    when: "not is_docker" }

- name: "bhr11"
  hosts: "bhr11"
  roles:
    - { role: backup-offsite,   tags: ['bhr11','backup_offsite'] }

- name: "bhr1"
  hosts: "bhr1"
  roles:

- name: "lb"
  hosts: lb
  tasks:
    - { import_tasks: "tasks/versions.yml", tags: ['common'] }
  roles:
    - { role: http_redirect,   tags: ['lb','http_redirect']                             }
    - { role: tls_letsencrypt, tags: ['lb','tls_letsencrypt'], when: not use_fixed_cert }
    - { role: tls_fixed_cert,  tags: ['lb','tls_fixedcert'],   when: use_fixed_cert     }
    - { role: lb_haproxy,      tags: ['lb','haproxy']                                   }

- name: "database"
  hosts: db
  tasks:
    - { import_tasks: "tasks/versions.yml", tags: ['common'] }
  roles:
    - { role: db_server,        tags: ['db', 'db-server'] }

- name: "sbs"
  hosts: sbs
  tasks:
    - { import_tasks: "tasks/versions.yml", tags: ['common'] }
  roles:
    - { role: sbs,         tags: ['sbs']  }

- name: "ldap"
  hosts: ldap
  tasks:
    - { import_tasks: "tasks/versions.yml", tags: ['common'] }
  roles:
    - { role: ldap_services,      tags: ['ldap', 'ldap-services' ] }
    - { role: ldap,               tags: ['ldap'                  ] }
#    - { role: pam_websso_daemon,  tags: ['client','websso-daemon'], when: experimental_features }

- name: "first ldap"
  hosts: ldap[0]
  roles:
    - { role: plsc,               tags: ['plsc', 'ldap-plsc'     ] }

- name: "meta"
  hosts: meta
  tasks:
    - { import_tasks: "tasks/versions.yml", tags: ['common'] }
  roles:
    - { role: pyff-metadata, tags: ['meta','pyff-metadata']}
    - { role: metadata,      tags: ['meta','metadata']     }

- name: "client"
  hosts: client
  tasks:
    - { import_tasks: "tasks/versions.yml", tags: ['common'] }
  roles:
    - { role: http_apache,          tags: ['client','client-base'  ] }
    - { role: client-base,          tags: ['client','client-base'  ] }
    - { role: oidc-op,              tags: ['client','oidc-op'      ] }

- name: "demo clients"
  hosts: "bhr13"
  tasks:
    - { import_tasks: "tasks/versions.yml", tags: ['common'] }
  roles:
    - { role: demo-sp,              tags: ['bhr13','demo-sp'] }
    - { role: tools,                tags: ['bhr13','tools']   }

- name: "sandbox"
  hosts: sandbox1
  tasks:
    - { import_tasks: "tasks/versions.yml", tags: ['common'] }
#  roles:
#    - { role: pam_websso,         tags: ['client','pam-websso'], when: experimental_features }

- name: "test"
  hosts: test
  tasks:
    - { import_tasks: "tasks/versions.yml", tags: ['common']  }
  roles:
    - { role: ci-test,                      tags: ['ci-test'] }
